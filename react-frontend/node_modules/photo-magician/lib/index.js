"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @name photoMagician
 * @author Jinke.Li
 * @github https://www.github.com/lijinke666/
 * 图片滤镜算法代码 参考网上代码
 */

var photoMagician = function () {
  function photoMagician() {
    _classCallCheck(this, photoMagician);

    this.colors = {};
    this.cover = null;
    this.canvas = document.createElement("canvas");
    this.ctx = this.canvas.getContext("2d");
    //图片滤镜
    this.imageFilterType = {
      vintage: "vintage",
      blackWhite: "blackWhite",
      invert: "invert",
      relief: "relief",
      mirror: "mirror",
      blur: "blur"
    }; //复古 //黑白 //反色 //浮雕 //镜像 //模糊
    this.outputType = { blob: "blob", dataUrl: "dataUrl" };
    this.defaultImageQuality = 1.0;
  }

  photoMagician.prototype.setConfig = function setConfig(_ref) {
    var imageQuality = _ref.imageQuality;

    this.defaultImageQuality = imageQuality;
  };

  photoMagician.prototype.createImageNode = function createImageNode(cover, canvasWidth, canvasHeight) {
    var _this = this;

    return new Promise(function (res, rej) {
      var coverType = typeof cover === "undefined" ? "undefined" : _typeof(cover);
      if (Object.is(coverType, "object")) {
        _this.setCanvasWidth(canvasWidth, canvasHeight);
        res(cover);
      } else if (Object.is(coverType, "string")) {
        var img = new Image();
        img.src = cover;
        img.crossOrigin = "Anonymous"; //支持图片跨域
        img.onload = function () {
          var suffix = _this.getCoverExt(cover);
          _this.setCanvasWidth(canvasWidth || img.width, canvasHeight || img.height);
          res({ suffix: suffix, img: img });
        };
        img.onerror = rej;
      } else {
        var errText = "The cover options is not a String of Object\n";
        rej(errText);
        throw new Error(errText);
      }
    });
  };

  photoMagician.prototype.getCoverExt = function getCoverExt(cover) {
    this.checkCoverType(cover);
    return cover.replace(/.*\.(jpg|jpeg|png|gif)/, "$1");
  };

  photoMagician.prototype.setCanvasWidth = function setCanvasWidth(width, height) {
    this.canvas.width = width;
    this.canvas.height = height;
  };

  photoMagician.prototype.checkCoverType = function checkCoverType(cover) {
    if (!Object.is(typeof cover === "undefined" ? "undefined" : _typeof(cover), "string")) throw new Error('cover can not be empty and it must be "string"');
  };

  photoMagician.prototype.getUrl = function getUrl() {
    var _this2 = this;

    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref2$outputType = _ref2.outputType,
        outputType = _ref2$outputType === undefined ? this.outputType.dataUrl : _ref2$outputType,
        suffix = _ref2.suffix,
        _ref2$quality = _ref2.quality,
        quality = _ref2$quality === undefined ? this.defaultImageQuality : _ref2$quality,
        _ref2$canvas = _ref2.canvas,
        canvas = _ref2$canvas === undefined ? this.canvas : _ref2$canvas;

    return new Promise(function (res, rej) {
      var outputTypes = Object.values(_this2.outputType);
      if (!outputTypes.includes(outputType)) {
        var errMsg = "invalid output type, one of " + outputType.join("|");
        rej(errMsg);
        throw new Error(errMsg);
      }
      if (outputType === _this2.outputType.dataUrl) {
        res(canvas.toDataURL("image/" + suffix), quality);
      }
      canvas.toBlob(res, "image/" + suffix, quality);
    });
  };
  /**
   * 添加水印
   * @param {Object} options
   * @param {String} cover 目标图片 必选
   * @param {String} waterMark 水印 (文本或图片地址) 必选
   * @param {String} mode 水印模式 非必选  text | image 默认 "text"
   * @param {Boolean} fontBold 文本水印加粗 (文字水印时有效) 非必选 默认 true
   * @param {Number} fontSize 文本字体大小 (文字水印时有效) 非必选 默认 20
   * @param {String} fontColor 文本水印颜色 (文字水印时有效) 非必选 默认 'rgba(255,255,255,.5)'
   * @param {Number} width 图片水印长度 (图片水印时有效) 非必选 默认 '50'
   * @param {NUmber} height 图片水印高度 (图片水印时有效) 非必选 默认 '50'
   */


  photoMagician.prototype.addWaterMark = function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          cover = _ref4.cover,
          _ref4$coordinate = _ref4.coordinate,
          coordinate = _ref4$coordinate === undefined ? [0, 0] : _ref4$coordinate,
          _ref4$fontBold = _ref4.fontBold,
          fontBold = _ref4$fontBold === undefined ? true : _ref4$fontBold,
          _ref4$fontSize = _ref4.fontSize,
          fontSize = _ref4$fontSize === undefined ? 20 : _ref4$fontSize,
          _ref4$fontColor = _ref4.fontColor,
          fontColor = _ref4$fontColor === undefined ? "rgba(255,255,255,.5)" : _ref4$fontColor,
          _ref4$mode = _ref4.mode,
          mode = _ref4$mode === undefined ? "text" : _ref4$mode,
          _ref4$width = _ref4.width,
          width = _ref4$width === undefined ? 50 : _ref4$width,
          _ref4$height = _ref4.height,
          height = _ref4$height === undefined ? 50 : _ref4$height,
          _ref4$opacity = _ref4.opacity,
          opacity = _ref4$opacity === undefined ? 0.5 : _ref4$opacity,
          waterMark = _ref4.waterMark,
          outputType = _ref4.outputType;

      var isTextMode, isImageMode, sx, sy, _ref5, img, suffix, _ref6, waterMarkImg;

      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(!Array.isArray(coordinate) || coordinate.length !== 2)) {
                _context.next = 2;
                break;
              }

              throw new Error("coordinate must be a array. like [x,y]");

            case 2:
              isTextMode = Object.is(mode, "text");
              isImageMode = Object.is(mode, "image");

              if (waterMark) {
                _context.next = 6;
                break;
              }

              throw new Error("waterMark is required.");

            case 6:
              if (!(!isTextMode && !isImageMode)) {
                _context.next = 8;
                break;
              }

              throw new Error('mode it must be "text" of "image" .');

            case 8:
              sx = coordinate[0], sy = coordinate[1];
              _context.next = 11;
              return this.createImageNode(cover);

            case 11:
              _ref5 = _context.sent;
              img = _ref5.img;
              suffix = _ref5.suffix;

              this.waterMarkCanvas = document.createElement("canvas");
              this.waterMarkCtx = this.waterMarkCanvas.getContext("2d");

              //绘制图片水印

              if (!isImageMode) {
                _context.next = 25;
                break;
              }

              _context.next = 19;
              return this.createImageNode(waterMark, img.width, img.height);

            case 19:
              _ref6 = _context.sent;
              waterMarkImg = _ref6.img;

              this.waterMarkCanvas.width = width;
              this.waterMarkCanvas.height = height;
              this.waterMarkCtx.globalAlpha = opacity;
              this.waterMarkCtx.drawImage(waterMarkImg, 0, 0, this.waterMarkCanvas.width, this.waterMarkCanvas.height);

            case 25:

              //绘制文本水印
              if (isTextMode) {
                this.waterMarkCtx.font = (fontBold ? "bold" : "") + " " + fontSize + (/.*px$/.test(fontSize) ? "" : "px") + " Microsoft YaHei";
                this.waterMarkCtx.fillStyle = fontColor;
                this.waterMarkCtx.textBaseline = "middle";
                this.waterMarkCtx.fillText(waterMark, sx, sy);
              }

              //离屏渲染
              this.ctx.drawImage(img, 0, 0, img.width, img.height);
              this.ctx.drawImage(this.waterMarkCanvas, sx, sy, isImageMode ? this.waterMarkCanvas.width : img.width, isImageMode ? this.waterMarkCanvas.height : img.height);

              _context.next = 30;
              return this.getUrl({ outputType: outputType, suffix: suffix });

            case 30:
              return _context.abrupt("return", _context.sent);

            case 31:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function addWaterMark() {
      return _ref3.apply(this, arguments);
    }

    return addWaterMark;
  }();
  /**
   * 裁剪图片
   * @param {object} Options
   * @param {String} cover 图片 必选
   * @param {Number} scale 缩放比例  非必选 默认 1.0 不缩放
   * @param {Array} coordinate 裁剪坐标  必选  [[x1,y1],[x2,y2]]
   * @return 裁剪后的图片节点
   */


  photoMagician.prototype.clipImage = function () {
    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
      var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          cover = _ref8.cover,
          _ref8$scale = _ref8.scale,
          scale = _ref8$scale === undefined ? 1.0 : _ref8$scale,
          _ref8$coordinate = _ref8.coordinate,
          coordinate = _ref8$coordinate === undefined ? [] : _ref8$coordinate,
          outputType = _ref8.outputType;

      var xy1, xy2, x1, y1, x2, y2, clipWidth, clipHeight, _ref9, img, suffix;

      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!coordinate.some(function (value) {
                return !Array.isArray(value) || value.length !== 2;
              })) {
                _context2.next = 2;
                break;
              }

              throw new Error("coordinate must be a array, like [[x1,y1],[x2,y2]]");

            case 2:
              if (Object.is(typeof scale === "undefined" ? "undefined" : _typeof(scale), "number")) {
                _context2.next = 4;
                break;
              }

              throw new Error("scale must be a number.");

            case 4:
              xy1 = coordinate[0], xy2 = coordinate[1];
              x1 = xy1[0], y1 = xy1[1];
              x2 = xy2[0], y2 = xy2[1];
              clipWidth = Math.abs(x2 - x1);
              clipHeight = Math.abs(y2 - y1);
              _context2.next = 11;
              return this.createImageNode(cover, clipWidth, clipHeight);

            case 11:
              _ref9 = _context2.sent;
              img = _ref9.img;
              suffix = _ref9.suffix;


              this.ctx.drawImage(img, x1 / scale, y1 / scale, clipWidth / scale, clipHeight / scale, 0, 0, clipWidth, clipHeight);

              _context2.next = 17;
              return this.getUrl({ outputType: outputType, suffix: suffix });

            case 17:
              return _context2.abrupt("return", _context2.sent);

            case 18:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function clipImage() {
      return _ref7.apply(this, arguments);
    }

    return clipImage;
  }();
  //拷贝图片像素信息


  photoMagician.prototype.copyImageData = function copyImageData() {
    var _ref10 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        width = _ref10.width,
        height = _ref10.height,
        data = _ref10.data;

    var copyData = this.ctx.createImageData(width, height);
    copyData.data.set(data);
    return copyData;
  };
  //获取图片像素信息


  photoMagician.prototype.transFormImageData = function () {
    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee3(filterType, suffix, outputType) {
      var imageData, data, canvasArea, tempData, sumred, sumgreen, sumblue, i, r, g, b, grey, _i, _r, _g, _b, color, _grey, _i2, _r2, _g2, _b2, x, y, idx, bidx, aidx, nr, ng, nb, _x8, _y, _idx, midx, _x9, _y2, _idx2, subCol, colOff, subRow, rowOff, idx2, _r3, _g3, _b3, _nr, _ng, _nb;

      return _regenerator2.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              //每一个像素由4个元素组成  分别是  r g b a
              //所以 第 i 个元素  是
              //r = pixelData[ i*4 +0 ];
              //g = pixelData[ i*4 +1 ];
              //b = pixelData[ i*4 +2 ];
              //a = pixelData[ i*4 +3 ];
              this.filterCanvas = document.createElement("canvas");
              this.filterCtx = this.filterCanvas.getContext("2d");
              this.filterCanvas.width = this.canvas.width;
              this.filterCanvas.height = this.canvas.height;
              imageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height); //像素信息

              data = imageData.data;
              canvasArea = this.canvas.width * this.canvas.height;
              tempData = this.copyImageData(imageData);
              sumred = 0.0, sumgreen = 0.0, sumblue = 0.0;
              _context3.t0 = filterType;
              _context3.next = _context3.t0 === this.imageFilterType["vintage"] ? 12 : _context3.t0 === this.imageFilterType["blackWhite"] ? 14 : _context3.t0 === this.imageFilterType["invert"] ? 16 : _context3.t0 === this.imageFilterType["relief"] ? 18 : _context3.t0 === this.imageFilterType["mirror"] ? 20 : _context3.t0 === this.imageFilterType["blur"] ? 22 : 24;
              break;

            case 12:
              for (i = 0; i < canvasArea; i++) {
                r = data[i * 4], g = data[i * 4 + 1], b = data[i * 4] + 2;
                //国际 最佳灰色图像算法

                grey = r * 0.3 + g * 0.59 + b * 0.11;

                data[i * 4] = grey;
                data[i * 4 + 1] = grey;
                data[i * 4 + 2] = grey;
              }
              return _context3.abrupt("break", 24);

            case 14:
              for (_i = 0; _i < canvasArea; _i++) {
                _r = data[_i * 4], _g = data[_i * 4 + 1], _b = data[_i * 4] + 2, color = null;
                _grey = _r * 0.3 + _g * 0.59 + _b * 0.11;


                if (_grey > 255 / 2) {
                  color = 255;
                } else {
                  color = 0;
                }

                data[_i * 4] = color;
                data[_i * 4 + 1] = color;
                data[_i * 4 + 2] = color;
              }
              return _context3.abrupt("break", 24);

            case 16:
              for (_i2 = 0; _i2 < canvasArea; _i2 += 4) {
                _r2 = data[_i2], _g2 = data[_i2 + 1], _b2 = data[_i2 + 2];


                data[_i2] = 255 - _r2;
                data[_i2 + 1] = 255 - _g2;
                data[_i2 + 2] = 255 - _b2;
              }
              return _context3.abrupt("break", 24);

            case 18:
              for (x = 1; x < tempData.width - 1; x++) {
                for (y = 1; y < tempData.height - 1; y++) {
                  idx = (x + y * tempData.width) * 4, bidx = (x - 1 + y * tempData.width) * 4, aidx = (x + 1 + y * tempData.width) * 4;
                  nr = tempData.data[aidx + 0] - tempData.data[bidx + 0] + 128;
                  ng = tempData.data[aidx + 1] - tempData.data[bidx + 1] + 128;
                  nb = tempData.data[aidx + 2] - tempData.data[bidx + 2] + 128;


                  nr = nr < 0 ? 0 : nr > 255 ? 255 : nr;
                  ng = ng < 0 ? 0 : ng > 255 ? 255 : ng;
                  nb = nb < 0 ? 0 : nb > 255 ? 255 : nb;

                  data[idx + 0] = nr;
                  data[idx + 1] = ng;
                  data[idx + 2] = nb;
                  data[idx + 3] = 255;
                }
              }
              return _context3.abrupt("break", 24);

            case 20:
              for (_x8 = 0; _x8 < tempData.width; _x8++) {
                for (_y = 0; _y < tempData.height; _y++) {
                  _idx = (_x8 + _y * tempData.width) * 4;
                  midx = (tempData.width - 1 - _x8 + _y * tempData.width) * 4;


                  data[midx + 0] = data[_idx + 0];
                  data[midx + 1] = data[_idx + 1];
                  data[midx + 2] = data[_idx + 2];
                  data[midx + 3] = 255;
                }
              }
              return _context3.abrupt("break", 24);

            case 22:
              for (_x9 = 0; _x9 < tempData.width; _x9++) {
                for (_y2 = 0; _y2 < tempData.height; _y2++) {
                  // Index of the pixel in the array
                  _idx2 = (_x9 + _y2 * tempData.width) * 4;

                  for (subCol = -2; subCol <= 2; subCol++) {
                    colOff = subCol + _x9;

                    if (colOff < 0 || colOff >= tempData.width) {
                      colOff = 0;
                    }
                    for (subRow = -2; subRow <= 2; subRow++) {
                      rowOff = subRow + _y2;

                      if (rowOff < 0 || rowOff >= tempData.height) {
                        rowOff = 0;
                      }
                      idx2 = (colOff + rowOff * tempData.width) * 4;
                      _r3 = tempData.data[idx2 + 0];
                      _g3 = tempData.data[idx2 + 1];
                      _b3 = tempData.data[idx2 + 2];

                      sumred += _r3;
                      sumgreen += _g3;
                      sumblue += _b3;
                    }
                  }

                  // calculate new RGB value
                  _nr = sumred / 25.0;
                  _ng = sumgreen / 25.0;
                  _nb = sumblue / 25.0;

                  // clear previous for next pixel point

                  sumred = 0.0;
                  sumgreen = 0.0;
                  sumblue = 0.0;

                  // assign new pixel value
                  data[_idx2 + 0] = _nr; // Red channel
                  data[_idx2 + 1] = _ng; // Green channel
                  data[_idx2 + 2] = _nb; // Blue channel
                  data[_idx2 + 3] = 255; // Alpha channel
                }
              }
              return _context3.abrupt("break", 24);

            case 24:
              this.filterCtx.putImageData(imageData, 0, 0, 0, 0, this.filterCanvas.width, this.filterCanvas.height);
              _context3.next = 27;
              return this.getUrl({ outputType: outputType, suffix: suffix, canvas: this.filterCanvas });

            case 27:
              return _context3.abrupt("return", _context3.sent);

            case 28:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function transFormImageData(_x5, _x6, _x7) {
      return _ref11.apply(this, arguments);
    }

    return transFormImageData;
  }();
  /**
   * 图片滤镜
   * @param {Object} options
   * @param {String} mode 滤镜名字 非必须 默认 复古 'vintage'
   */


  photoMagician.prototype.addImageFilter = function () {
    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
      var _ref13 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          cover = _ref13.cover,
          _ref13$mode = _ref13.mode,
          mode = _ref13$mode === undefined ? this.imageFilterType["vintage"] : _ref13$mode,
          outputType = _ref13.outputType;

      var imageFilterConfig, _ref14, img, suffix;

      return _regenerator2.default.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              imageFilterConfig = Object.values(this.imageFilterType);

              if (imageFilterConfig.includes(mode)) {
                _context4.next = 3;
                break;
              }

              throw new Error("mode must one of [" + imageFilterConfig.join(",") + "]");

            case 3:
              _context4.next = 5;
              return this.createImageNode(cover);

            case 5:
              _ref14 = _context4.sent;
              img = _ref14.img;
              suffix = _ref14.suffix;

              this.ctx.drawImage(img, 0, 0, img.width, img.height);
              return _context4.abrupt("return", this.transFormImageData(mode, suffix, outputType));

            case 10:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function addImageFilter() {
      return _ref12.apply(this, arguments);
    }

    return addImageFilter;
  }();
  /**
   * 旋转图片
   * @param {String | Object} cover 图片
   * @param {Number} rotate 旋转比例 (0 -360 ) deg
   */


  photoMagician.prototype.rotateImage = function () {
    var _ref15 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
      var _ref16 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          cover = _ref16.cover,
          _ref16$rotate = _ref16.rotate,
          rotate = _ref16$rotate === undefined ? 0 : _ref16$rotate,
          outputType = _ref16.outputType;

      var _ref17, img, suffix;

      return _regenerator2.default.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (Object.is(typeof rotate === "undefined" ? "undefined" : _typeof(rotate), "number")) {
                _context5.next = 2;
                break;
              }

              throw new Error("rotate must be a number.");

            case 2:
              _context5.next = 4;
              return this.createImageNode(cover);

            case 4:
              _ref17 = _context5.sent;
              img = _ref17.img;
              suffix = _ref17.suffix;

              this.ctx.save();
              this.ctx.rotate(rotate * Math.PI / 180);
              this.ctx.drawImage(img, 0, 0, img.width, img.height);
              this.ctx.restore();
              _context5.next = 13;
              return this.getUrl({ outputType: outputType, suffix: suffix });

            case 13:
              return _context5.abrupt("return", _context5.sent);

            case 14:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function rotateImage() {
      return _ref15.apply(this, arguments);
    }

    return rotateImage;
  }();
  /**
   * 图片 转base64
   * @param {Object} options
   * @param {String | Object} cover 图片地址
   * @return 图片base64 data
   */


  photoMagician.prototype.toBase64Url = function () {
    var _ref18 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee6(_ref19) {
      var cover = _ref19.cover,
          outputType = _ref19.outputType;

      var _ref20, img, suffix;

      return _regenerator2.default.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.createImageNode(cover);

            case 2:
              _ref20 = _context6.sent;
              img = _ref20.img;
              suffix = _ref20.suffix;

              this.ctx.drawImage(img, 0, 0, img.width, img.height);
              _context6.next = 8;
              return this.getUrl({ outputType: outputType, suffix: suffix });

            case 8:
              return _context6.abrupt("return", _context6.sent);

            case 9:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function toBase64Url(_x12) {
      return _ref18.apply(this, arguments);
    }

    return toBase64Url;
  }();
  /**
   * 压缩图片
   * @param {Object} options
   * @param {String | Object} cover 图片地址 | 图片节点 必选
   * @param {Number}  quality 压缩比例  非必选 默认 '0.92'
   * @return 压缩后的图片节点
   */


  photoMagician.prototype.compressImage = function () {
    var _ref21 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee7() {
      var _ref22 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          cover = _ref22.cover,
          _ref22$quality = _ref22.quality,
          quality = _ref22$quality === undefined ? 0.92 : _ref22$quality,
          outputType = _ref22.outputType;

      var _ref23, img, _quality, suffix;

      return _regenerator2.default.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (Object.is(typeof quality === "undefined" ? "undefined" : _typeof(quality), "number")) {
                _context7.next = 2;
                break;
              }

              throw new Error("quality must be a number.");

            case 2:
              _context7.next = 4;
              return this.createImageNode(cover);

            case 4:
              _ref23 = _context7.sent;
              img = _ref23.img;

              this.ctx.drawImage(img, 0, 0, img.width, img.height);
              _quality = Number(quality);
              suffix = _quality === 0.92 ? "png" : "jpeg";
              _context7.next = 11;
              return this.getUrl({ outputType: outputType, suffix: suffix, quality: _quality });

            case 11:
              return _context7.abrupt("return", _context7.sent);

            case 12:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function compressImage() {
      return _ref21.apply(this, arguments);
    }

    return compressImage;
  }();

  photoMagician.prototype.getPrimaryColor = function () {
    var _ref24 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee8() {
      var _ref25 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          cover = _ref25.cover;

      var _ref26, img, _ctx$getImageData, data, imgDataWidth, imgDataHeight, section, i, len, _ref27, r, g, b, a, rgba;

      return _regenerator2.default.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return this.createImageNode(cover);

            case 2:
              _ref26 = _context8.sent;
              img = _ref26.img;

              this.ctx.drawImage(img, 0, 0, img.width, img.height);
              _ctx$getImageData = this.ctx.getImageData(0, 0, img.width, img.height), data = _ctx$getImageData.data, imgDataWidth = _ctx$getImageData.width, imgDataHeight = _ctx$getImageData.height;
              section = imgDataWidth * imgDataHeight;

              for (i = 0, len = section; i < len; i++) {
                _ref27 = [data[i * 4], data[i * 4 + 1], data[i * 4 + 2], data[i * 4 + 3]], r = _ref27[0], g = _ref27[1], b = _ref27[2], a = _ref27[3];
                rgba = "rgba(" + r + "," + g + "," + b + "," + a + ")";


                if (this.colors[rgba]) {
                  this.colors[rgba].num++;
                } else {
                  this.colors[rgba] = { color: rgba, num: 1 };
                }
              }
              return _context8.abrupt("return", this.getMaxPixelDensity(this.colors));

            case 9:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function getPrimaryColor() {
      return _ref24.apply(this, arguments);
    }

    return getPrimaryColor;
  }();

  photoMagician.prototype.getMaxPixelDensity = function getMaxPixelDensity(data) {
    var sort = Object.values(data).sort(function (a, b) {
      return a.num - b.num;
    });
    return sort[sort.length - 1]["color"];
  };

  return photoMagician;
}();

exports.default = photoMagician;